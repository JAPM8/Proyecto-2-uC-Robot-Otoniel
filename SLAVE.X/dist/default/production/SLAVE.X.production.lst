

Microchip MPLAB XC8 Assembler V2.35 build 20211206165544 
                                                                                               Thu Jun 02 00:35:00 2022

Microchip MPLAB XC8 C Compiler v2.35 (Free license) build 20211206165544 Og1 
     1                           	processor	16F887
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	cinit,global,class=CODE,merge=1,delta=2
     5                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
     6                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     7                           	psect	maintext,global,class=CODE,split=1,delta=2
     8                           	psect	text1,local,class=CODE,merge=1,delta=2
     9                           	psect	text2,local,class=CODE,merge=1,delta=2
    10                           	psect	text3,local,class=CODE,merge=1,delta=2
    11                           	psect	text4,local,class=CODE,merge=1,delta=2
    12                           	psect	intentry,global,class=CODE,delta=2
    13                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=2,noexec
    14                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    15                           	dabs	1,0x7E,2
    16  0000                     
    17                           ; Version 2.40
    18                           ; Generated 17/11/2021 GMT
    19                           ; 
    20                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    21                           ; All rights reserved.
    22                           ; 
    23                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    24                           ; 
    25                           ; Redistribution and use in source and binary forms, with or without modification, are
    26                           ; permitted provided that the following conditions are met:
    27                           ; 
    28                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    29                           ;        conditions and the following disclaimer.
    30                           ; 
    31                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    32                           ;        of conditions and the following disclaimer in the documentation and/or other
    33                           ;        materials provided with the distribution. Publication is not required when
    34                           ;        this file is used in an embedded application.
    35                           ; 
    36                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    37                           ;        software without specific prior written permission.
    38                           ; 
    39                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    40                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    41                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    42                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    43                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    44                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    45                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    46                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    47                           ; 
    48                           ; 
    49                           ; Code-generator required, PIC16F887 Definitions
    50                           ; 
    51                           ; SFR Addresses
    52  0000                     	;# 
    53  0001                     	;# 
    54  0002                     	;# 
    55  0003                     	;# 
    56  0004                     	;# 
    57  0005                     	;# 
    58  0006                     	;# 
    59  0007                     	;# 
    60  0008                     	;# 
    61  0009                     	;# 
    62  000A                     	;# 
    63  000B                     	;# 
    64  000C                     	;# 
    65  000D                     	;# 
    66  000E                     	;# 
    67  000E                     	;# 
    68  000F                     	;# 
    69  0010                     	;# 
    70  0011                     	;# 
    71  0012                     	;# 
    72  0013                     	;# 
    73  0014                     	;# 
    74  0015                     	;# 
    75  0015                     	;# 
    76  0016                     	;# 
    77  0017                     	;# 
    78  0018                     	;# 
    79  0019                     	;# 
    80  001A                     	;# 
    81  001B                     	;# 
    82  001B                     	;# 
    83  001C                     	;# 
    84  001D                     	;# 
    85  001E                     	;# 
    86  001F                     	;# 
    87  0081                     	;# 
    88  0085                     	;# 
    89  0086                     	;# 
    90  0087                     	;# 
    91  0088                     	;# 
    92  0089                     	;# 
    93  008C                     	;# 
    94  008D                     	;# 
    95  008E                     	;# 
    96  008F                     	;# 
    97  0090                     	;# 
    98  0091                     	;# 
    99  0092                     	;# 
   100  0093                     	;# 
   101  0093                     	;# 
   102  0093                     	;# 
   103  0094                     	;# 
   104  0095                     	;# 
   105  0096                     	;# 
   106  0097                     	;# 
   107  0098                     	;# 
   108  0099                     	;# 
   109  009A                     	;# 
   110  009B                     	;# 
   111  009C                     	;# 
   112  009D                     	;# 
   113  009E                     	;# 
   114  009F                     	;# 
   115  0105                     	;# 
   116  0107                     	;# 
   117  0108                     	;# 
   118  0109                     	;# 
   119  010C                     	;# 
   120  010C                     	;# 
   121  010D                     	;# 
   122  010E                     	;# 
   123  010F                     	;# 
   124  0185                     	;# 
   125  0187                     	;# 
   126  0188                     	;# 
   127  0189                     	;# 
   128  018C                     	;# 
   129  018D                     	;# 
   130  0000                     	;# 
   131  0001                     	;# 
   132  0002                     	;# 
   133  0003                     	;# 
   134  0004                     	;# 
   135  0005                     	;# 
   136  0006                     	;# 
   137  0007                     	;# 
   138  0008                     	;# 
   139  0009                     	;# 
   140  000A                     	;# 
   141  000B                     	;# 
   142  000C                     	;# 
   143  000D                     	;# 
   144  000E                     	;# 
   145  000E                     	;# 
   146  000F                     	;# 
   147  0010                     	;# 
   148  0011                     	;# 
   149  0012                     	;# 
   150  0013                     	;# 
   151  0014                     	;# 
   152  0015                     	;# 
   153  0015                     	;# 
   154  0016                     	;# 
   155  0017                     	;# 
   156  0018                     	;# 
   157  0019                     	;# 
   158  001A                     	;# 
   159  001B                     	;# 
   160  001B                     	;# 
   161  001C                     	;# 
   162  001D                     	;# 
   163  001E                     	;# 
   164  001F                     	;# 
   165  0081                     	;# 
   166  0085                     	;# 
   167  0086                     	;# 
   168  0087                     	;# 
   169  0088                     	;# 
   170  0089                     	;# 
   171  008C                     	;# 
   172  008D                     	;# 
   173  008E                     	;# 
   174  008F                     	;# 
   175  0090                     	;# 
   176  0091                     	;# 
   177  0092                     	;# 
   178  0093                     	;# 
   179  0093                     	;# 
   180  0093                     	;# 
   181  0094                     	;# 
   182  0095                     	;# 
   183  0096                     	;# 
   184  0097                     	;# 
   185  0098                     	;# 
   186  0099                     	;# 
   187  009A                     	;# 
   188  009B                     	;# 
   189  009C                     	;# 
   190  009D                     	;# 
   191  009E                     	;# 
   192  009F                     	;# 
   193  0105                     	;# 
   194  0107                     	;# 
   195  0108                     	;# 
   196  0109                     	;# 
   197  010C                     	;# 
   198  010C                     	;# 
   199  010D                     	;# 
   200  010E                     	;# 
   201  010F                     	;# 
   202  0185                     	;# 
   203  0187                     	;# 
   204  0188                     	;# 
   205  0189                     	;# 
   206  018C                     	;# 
   207  018D                     	;# 
   208  0012                     _T2CONbits	set	18
   209  001D                     _CCP2CON	set	29
   210  0017                     _CCP1CON	set	23
   211  0014                     _SSPCONbits	set	20
   212  0007                     _PORTC	set	7
   213  000B                     _INTCONbits	set	11
   214  0017                     _CCP1CONbits	set	23
   215  0015                     _CCPR1L	set	21
   216  001D                     _CCP2CONbits	set	29
   217  001B                     _CCPR2L	set	27
   218  0013                     _SSPBUF	set	19
   219  000C                     _PIR1bits	set	12
   220  0092                     _PR2	set	146
   221  0087                     _TRISCbits	set	135
   222  0094                     _SSPSTATbits	set	148
   223  0087                     _TRISC	set	135
   224  008C                     _PIE1bits	set	140
   225  008F                     _OSCCONbits	set	143
   226  0085                     _TRISAbits	set	133
   227  0189                     _ANSELH	set	393
   228  0188                     _ANSEL	set	392
   229                           
   230                           	psect	cinit
   231  000F                     start_initialization:	
   232                           ; #config settings
   233                           
   234  000F                     __initialization:
   235                           
   236                           ; Clear objects allocated to COMMON
   237  000F  01F4               	clrf	__pbssCOMMON& (0+127)
   238  0010  01F5               	clrf	(__pbssCOMMON+1)& (0+127)
   239  0011  01F6               	clrf	(__pbssCOMMON+2)& (0+127)
   240  0012                     end_of_initialization:	
   241                           ;End of C runtime variable initialization code
   242                           
   243  0012                     __end_of__initialization:
   244  0012  0183               	clrf	3
   245  0013  120A  118A  28D3   	ljmp	_main	;jump to C main() function
   246                           
   247                           	psect	bssCOMMON
   248  0074                     __pbssCOMMON:
   249  0074                     _flag_servo:
   250  0074                     	ds	2
   251  0076                     _val_PWM:
   252  0076                     	ds	1
   253                           
   254                           	psect	cstackCOMMON
   255  0070                     __pcstackCOMMON:
   256  0070                     ?_setup:
   257  0070                     ?_set_SPI:	
   258                           ; 1 bytes @ 0x0
   259                           
   260  0070                     ?_set_PWM:	
   261                           ; 1 bytes @ 0x0
   262                           
   263  0070                     ?_isr:	
   264                           ; 1 bytes @ 0x0
   265                           
   266  0070                     ??_isr:	
   267                           ; 1 bytes @ 0x0
   268                           
   269  0070                     ?_main:	
   270                           ; 1 bytes @ 0x0
   271                           
   272                           
   273                           ; 1 bytes @ 0x0
   274  0070                     	ds	4
   275  0074                     ??_setup:
   276  0074                     ??_set_SPI:	
   277                           ; 1 bytes @ 0x4
   278                           
   279  0074                     ??_set_PWM:	
   280                           ; 1 bytes @ 0x4
   281                           
   282  0074                     ??_main:	
   283                           ; 1 bytes @ 0x4
   284                           
   285                           
   286                           	psect	maintext
   287  00D3                     __pmaintext:	
   288                           ; 1 bytes @ 0x4
   289 ;;
   290 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   291 ;;
   292 ;; *************** function _main *****************
   293 ;; Defined at:
   294 ;;		line 94 in file "main.c"
   295 ;; Parameters:    Size  Location     Type
   296 ;;		None
   297 ;; Auto vars:     Size  Location     Type
   298 ;;		None
   299 ;; Return value:  Size  Location     Type
   300 ;;                  1    wreg      void 
   301 ;; Registers used:
   302 ;;		wreg, status,2, status,0, pclath, cstack
   303 ;; Tracked objects:
   304 ;;		On entry : B00/0
   305 ;;		On exit  : 0/0
   306 ;;		Unchanged: 0/0
   307 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   308 ;;      Params:         0       0       0       0       0
   309 ;;      Locals:         0       0       0       0       0
   310 ;;      Temps:          0       0       0       0       0
   311 ;;      Totals:         0       0       0       0       0
   312 ;;Total ram usage:        0 bytes
   313 ;; Hardware stack levels required when called: 3
   314 ;; This function calls:
   315 ;;		_setup
   316 ;; This function is called by:
   317 ;;		Startup code after reset
   318 ;; This function uses a non-reentrant model
   319 ;;
   320                           
   321  00D3                     _main:	
   322                           ;psect for function _main
   323                           
   324  00D3                     l754:	
   325                           ;incstack = 0
   326                           ; Regs used in _main: [wreg+status,2+status,0+pclath+cstack]
   327                           
   328                           
   329                           ;main.c: 95:     setup();
   330  00D3  120A  118A  20A2  120A  118A  	fcall	_setup
   331  00D8                     l65:	
   332                           ;main.c: 97:     while(1){
   333                           
   334  00D8                     l66:	
   335                           ;main.c: 99:     }
   336                           
   337  00D8  28D8               	goto	l65
   338  00D9  120A  118A  280C   	ljmp	start
   339  00DC                     __end_of_main:
   340                           
   341                           	psect	text1
   342  00A2                     __ptext1:	
   343 ;; *************** function _setup *****************
   344 ;; Defined at:
   345 ;;		line 106 in file "main.c"
   346 ;; Parameters:    Size  Location     Type
   347 ;;		None
   348 ;; Auto vars:     Size  Location     Type
   349 ;;		None
   350 ;; Return value:  Size  Location     Type
   351 ;;                  1    wreg      void 
   352 ;; Registers used:
   353 ;;		wreg, status,2, status,0, pclath, cstack
   354 ;; Tracked objects:
   355 ;;		On entry : 0/0
   356 ;;		On exit  : 0/0
   357 ;;		Unchanged: 0/0
   358 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   359 ;;      Params:         0       0       0       0       0
   360 ;;      Locals:         0       0       0       0       0
   361 ;;      Temps:          0       0       0       0       0
   362 ;;      Totals:         0       0       0       0       0
   363 ;;Total ram usage:        0 bytes
   364 ;; Hardware stack levels used: 1
   365 ;; Hardware stack levels required when called: 2
   366 ;; This function calls:
   367 ;;		_set_PWM
   368 ;;		_set_SPI
   369 ;; This function is called by:
   370 ;;		_main
   371 ;; This function uses a non-reentrant model
   372 ;;
   373                           
   374  00A2                     _setup:	
   375                           ;psect for function _setup
   376                           
   377  00A2                     l716:	
   378                           ;incstack = 0
   379                           ; Regs used in _setup: [wreg+status,2+status,0+pclath+cstack]
   380                           
   381                           
   382                           ;main.c: 108:     ANSEL = 0;
   383  00A2  1683               	bsf	3,5	;RP0=1, select bank3
   384  00A3  1703               	bsf	3,6	;RP1=1, select bank3
   385  00A4  0188               	clrf	8	;volatile
   386                           
   387                           ;main.c: 109:     ANSELH = 0;
   388  00A5  0189               	clrf	9	;volatile
   389  00A6                     l718:
   390                           
   391                           ;main.c: 111:     TRISAbits.TRISA5 = 1;
   392  00A6  1683               	bsf	3,5	;RP0=1, select bank1
   393  00A7  1303               	bcf	3,6	;RP1=0, select bank1
   394  00A8  1685               	bsf	5,5	;volatile
   395  00A9                     l720:
   396                           
   397                           ;main.c: 114:     OSCCONbits.IRCF = 0b011;
   398  00A9  080F               	movf	15,w	;volatile
   399  00AA  398F               	andlw	-113
   400  00AB  3830               	iorlw	48
   401  00AC  008F               	movwf	15	;volatile
   402  00AD                     l722:
   403                           
   404                           ;main.c: 115:     OSCCONbits.SCS = 1;
   405  00AD  140F               	bsf	15,0	;volatile
   406  00AE                     l724:
   407                           
   408                           ;main.c: 117:     set_SPI();
   409  00AE  120A  118A  20C1  120A  118A  	fcall	_set_SPI
   410  00B3                     l726:
   411                           
   412                           ;main.c: 118:     set_PWM();
   413  00B3  120A  118A  2075  120A  118A  	fcall	_set_PWM
   414  00B8                     l728:
   415                           
   416                           ;main.c: 121:     INTCONbits.GIE = 1;
   417  00B8  178B               	bsf	11,7	;volatile
   418  00B9                     l730:
   419                           
   420                           ;main.c: 122:     PIR1bits.SSPIF = 0;
   421  00B9  1283               	bcf	3,5	;RP0=0, select bank0
   422  00BA  1303               	bcf	3,6	;RP1=0, select bank0
   423  00BB  118C               	bcf	12,3	;volatile
   424  00BC                     l732:
   425                           
   426                           ;main.c: 123:     PIE1bits.SSPIE = 1;
   427  00BC  1683               	bsf	3,5	;RP0=1, select bank1
   428  00BD  1303               	bcf	3,6	;RP1=0, select bank1
   429  00BE  158C               	bsf	12,3	;volatile
   430  00BF                     l734:
   431                           
   432                           ;main.c: 124:     INTCONbits.PEIE = 1;
   433  00BF  170B               	bsf	11,6	;volatile
   434  00C0                     l71:
   435  00C0  0008               	return
   436  00C1                     __end_of_setup:
   437                           
   438                           	psect	text2
   439  00C1                     __ptext2:	
   440 ;; *************** function _set_SPI *****************
   441 ;; Defined at:
   442 ;;		line 129 in file "main.c"
   443 ;; Parameters:    Size  Location     Type
   444 ;;		None
   445 ;; Auto vars:     Size  Location     Type
   446 ;;		None
   447 ;; Return value:  Size  Location     Type
   448 ;;                  1    wreg      void 
   449 ;; Registers used:
   450 ;;		wreg, status,2, status,0
   451 ;; Tracked objects:
   452 ;;		On entry : 0/0
   453 ;;		On exit  : 0/0
   454 ;;		Unchanged: 0/0
   455 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   456 ;;      Params:         0       0       0       0       0
   457 ;;      Locals:         0       0       0       0       0
   458 ;;      Temps:          0       0       0       0       0
   459 ;;      Totals:         0       0       0       0       0
   460 ;;Total ram usage:        0 bytes
   461 ;; Hardware stack levels used: 1
   462 ;; Hardware stack levels required when called: 1
   463 ;; This function calls:
   464 ;;		Nothing
   465 ;; This function is called by:
   466 ;;		_setup
   467 ;; This function uses a non-reentrant model
   468 ;;
   469                           
   470  00C1                     _set_SPI:	
   471                           ;psect for function _set_SPI
   472                           
   473  00C1                     l672:	
   474                           ;incstack = 0
   475                           ; Regs used in _set_SPI: [wreg+status,2+status,0]
   476                           
   477                           
   478                           ;main.c: 132:     TRISC = 0b00011000;
   479  00C1  3018               	movlw	24
   480  00C2  1683               	bsf	3,5	;RP0=1, select bank1
   481  00C3  1303               	bcf	3,6	;RP1=0, select bank1
   482  00C4  0087               	movwf	7	;volatile
   483  00C5                     l674:
   484                           
   485                           ;main.c: 133:     PORTC = 0;
   486  00C5  1283               	bcf	3,5	;RP0=0, select bank0
   487  00C6  1303               	bcf	3,6	;RP1=0, select bank0
   488  00C7  0187               	clrf	7	;volatile
   489  00C8                     l676:
   490                           
   491                           ;main.c: 136:     SSPCONbits.SSPM = 0b0100;
   492  00C8  0814               	movf	20,w	;volatile
   493  00C9  39F0               	andlw	-16
   494  00CA  3804               	iorlw	4
   495  00CB  0094               	movwf	20	;volatile
   496  00CC                     l678:
   497                           
   498                           ;main.c: 137:     SSPCONbits.CKP = 0;
   499  00CC  1214               	bcf	20,4	;volatile
   500  00CD                     l680:
   501                           
   502                           ;main.c: 138:     SSPCONbits.SSPEN = 1;
   503  00CD  1694               	bsf	20,5	;volatile
   504  00CE                     l682:
   505                           
   506                           ;main.c: 140:     SSPSTATbits.CKE = 1;
   507  00CE  1683               	bsf	3,5	;RP0=1, select bank1
   508  00CF  1303               	bcf	3,6	;RP1=0, select bank1
   509  00D0  1714               	bsf	20,6	;volatile
   510  00D1                     l684:
   511                           
   512                           ;main.c: 141:     SSPSTATbits.SMP = 0;
   513  00D1  1394               	bcf	20,7	;volatile
   514  00D2                     l74:
   515  00D2  0008               	return
   516  00D3                     __end_of_set_SPI:
   517                           
   518                           	psect	text3
   519  0075                     __ptext3:	
   520 ;; *************** function _set_PWM *****************
   521 ;; Defined at:
   522 ;;		line 145 in file "main.c"
   523 ;; Parameters:    Size  Location     Type
   524 ;;		None
   525 ;; Auto vars:     Size  Location     Type
   526 ;;		None
   527 ;; Return value:  Size  Location     Type
   528 ;;                  1    wreg      void 
   529 ;; Registers used:
   530 ;;		wreg, status,2, status,0
   531 ;; Tracked objects:
   532 ;;		On entry : 0/0
   533 ;;		On exit  : 0/0
   534 ;;		Unchanged: 0/0
   535 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   536 ;;      Params:         0       0       0       0       0
   537 ;;      Locals:         0       0       0       0       0
   538 ;;      Temps:          0       0       0       0       0
   539 ;;      Totals:         0       0       0       0       0
   540 ;;Total ram usage:        0 bytes
   541 ;; Hardware stack levels used: 1
   542 ;; Hardware stack levels required when called: 1
   543 ;; This function calls:
   544 ;;		Nothing
   545 ;; This function is called by:
   546 ;;		_setup
   547 ;; This function uses a non-reentrant model
   548 ;;
   549                           
   550  0075                     _set_PWM:	
   551                           ;psect for function _set_PWM
   552                           
   553  0075                     l688:	
   554                           ;incstack = 0
   555                           ; Regs used in _set_PWM: [wreg+status,2+status,0]
   556                           
   557                           
   558                           ;main.c: 147:     TRISCbits.TRISC2 = 1;
   559  0075  1683               	bsf	3,5	;RP0=1, select bank1
   560  0076  1303               	bcf	3,6	;RP1=0, select bank1
   561  0077  1507               	bsf	7,2	;volatile
   562  0078                     l690:
   563                           
   564                           ;main.c: 148:     CCP1CON = 0;
   565  0078  1283               	bcf	3,5	;RP0=0, select bank0
   566  0079  1303               	bcf	3,6	;RP1=0, select bank0
   567  007A  0197               	clrf	23	;volatile
   568                           
   569                           ;main.c: 149:     CCP2CON = 0;
   570  007B  019D               	clrf	29	;volatile
   571  007C                     l692:
   572                           
   573                           ;main.c: 150:     PR2 = 156;
   574  007C  309C               	movlw	156
   575  007D  1683               	bsf	3,5	;RP0=1, select bank1
   576  007E  1303               	bcf	3,6	;RP1=0, select bank1
   577  007F  0092               	movwf	18	;volatile
   578  0080                     l694:
   579                           
   580                           ;main.c: 153:     CCP1CONbits.P1M = 0;
   581  0080  303F               	movlw	-193
   582  0081  1283               	bcf	3,5	;RP0=0, select bank0
   583  0082  1303               	bcf	3,6	;RP1=0, select bank0
   584  0083  0597               	andwf	23,f	;volatile
   585  0084                     l696:
   586                           
   587                           ;main.c: 154:     CCP1CONbits.CCP1M = 0b1100;
   588  0084  0817               	movf	23,w	;volatile
   589  0085  39F0               	andlw	-16
   590  0086  380C               	iorlw	12
   591  0087  0097               	movwf	23	;volatile
   592  0088                     l698:
   593                           
   594                           ;main.c: 155:     CCP2CONbits.CCP2M = 0b1100;
   595  0088  081D               	movf	29,w	;volatile
   596  0089  39F0               	andlw	-16
   597  008A  380C               	iorlw	12
   598  008B  009D               	movwf	29	;volatile
   599  008C                     l700:
   600                           
   601                           ;main.c: 157:     CCPR1L = 47>>2;
   602  008C  300B               	movlw	11
   603  008D  0095               	movwf	21	;volatile
   604  008E                     l702:
   605                           
   606                           ;main.c: 158:     CCP1CONbits.DC1B = 47 & 0b11;
   607  008E  3030               	movlw	48
   608  008F  0497               	iorwf	23,f	;volatile
   609  0090                     l704:
   610                           
   611                           ;main.c: 161:     CCPR2L = 47>>2;
   612  0090  300B               	movlw	11
   613  0091  009B               	movwf	27	;volatile
   614  0092                     l706:
   615                           
   616                           ;main.c: 164:     CCP2CONbits.DC2B0 = 47 & 1;
   617  0092  161D               	bsf	29,4	;volatile
   618  0093                     l708:
   619                           
   620                           ;main.c: 165:     CCP2CONbits.DC2B1 = (47 >> 1) & 1;
   621  0093  169D               	bsf	29,5	;volatile
   622  0094                     l710:
   623                           
   624                           ;main.c: 168:     PIR1bits.TMR2IF = 0;
   625  0094  108C               	bcf	12,1	;volatile
   626  0095                     l712:
   627                           
   628                           ;main.c: 169:     T2CONbits.T2CKPS = 0b11;
   629  0095  3003               	movlw	3
   630  0096  0492               	iorwf	18,f	;volatile
   631  0097                     l714:
   632                           
   633                           ;main.c: 170:     T2CONbits.TMR2ON = 1;
   634  0097  1512               	bsf	18,2	;volatile
   635  0098                     l77:	
   636                           ;main.c: 171:     while(!PIR1bits.TMR2IF);
   637                           
   638  0098  1C8C               	btfss	12,1	;volatile
   639  0099  289B               	goto	u11
   640  009A  289C               	goto	u10
   641  009B                     u11:
   642  009B  2898               	goto	l77
   643  009C                     u10:
   644  009C                     l79:
   645                           
   646                           ;main.c: 172:     PIR1bits.TMR2IF = 0;
   647  009C  108C               	bcf	12,1	;volatile
   648                           
   649                           ;main.c: 174:     TRISCbits.TRISC2 = 0;
   650  009D  1683               	bsf	3,5	;RP0=1, select bank1
   651  009E  1303               	bcf	3,6	;RP1=0, select bank1
   652  009F  1107               	bcf	7,2	;volatile
   653                           
   654                           ;main.c: 175:     TRISCbits.TRISC1 = 0;
   655  00A0  1087               	bcf	7,1	;volatile
   656  00A1                     l80:	
   657                           ;main.c: 176:     return;
   658                           
   659  00A1  0008               	return
   660  00A2                     __end_of_set_PWM:
   661                           
   662                           	psect	text4
   663  0016                     __ptext4:	
   664 ;; *************** function _isr *****************
   665 ;; Defined at:
   666 ;;		line 66 in file "main.c"
   667 ;; Parameters:    Size  Location     Type
   668 ;;		None
   669 ;; Auto vars:     Size  Location     Type
   670 ;;		None
   671 ;; Return value:  Size  Location     Type
   672 ;;                  1    wreg      void 
   673 ;; Registers used:
   674 ;;		wreg, status,2, status,0
   675 ;; Tracked objects:
   676 ;;		On entry : 0/0
   677 ;;		On exit  : 0/0
   678 ;;		Unchanged: 0/0
   679 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   680 ;;      Params:         0       0       0       0       0
   681 ;;      Locals:         0       0       0       0       0
   682 ;;      Temps:          4       0       0       0       0
   683 ;;      Totals:         4       0       0       0       0
   684 ;;Total ram usage:        4 bytes
   685 ;; Hardware stack levels used: 1
   686 ;; This function calls:
   687 ;;		Nothing
   688 ;; This function is called by:
   689 ;;		Interrupt level 1
   690 ;; This function uses a non-reentrant model
   691 ;;
   692                           
   693  0016                     _isr:	
   694                           ;psect for function _isr
   695                           
   696  0016                     i1l738:
   697                           
   698                           ;main.c: 67:     if (PIR1bits.SSPIF){
   699  0016  1283               	bcf	3,5	;RP0=0, select bank0
   700  0017  1303               	bcf	3,6	;RP1=0, select bank0
   701  0018  1D8C               	btfss	12,3	;volatile
   702  0019  281B               	goto	u2_21
   703  001A  281C               	goto	u2_20
   704  001B                     u2_21:
   705  001B  286E               	goto	i1l60
   706  001C                     u2_20:
   707  001C                     i1l740:
   708                           
   709                           ;main.c: 68:         val_PWM = SSPBUF;
   710  001C  0813               	movf	19,w	;volatile
   711  001D  00F0               	movwf	??_isr
   712  001E  0870               	movf	??_isr,w
   713  001F  00F6               	movwf	_val_PWM
   714                           
   715                           ;main.c: 69:         flag_servo = (val_PWM < 128);
   716  0020  3080               	movlw	128
   717  0021  0276               	subwf	_val_PWM,w
   718  0022  1C03               	skipc
   719  0023  2825               	goto	u3_21
   720  0024  2827               	goto	u3_20
   721  0025                     u3_21:
   722  0025  3001               	movlw	1
   723  0026  2828               	goto	u4_20
   724  0027                     u3_20:
   725  0027  3000               	movlw	0
   726  0028                     u4_20:
   727  0028  00F0               	movwf	??_isr
   728  0029  01F1               	clrf	??_isr+1
   729  002A  0870               	movf	??_isr,w
   730  002B  00F4               	movwf	_flag_servo
   731  002C  0871               	movf	??_isr+1,w
   732  002D  00F5               	movwf	_flag_servo+1
   733  002E                     i1l742:
   734                           
   735                           ;main.c: 70:         val_PWM = val_PWM & 127 ;
   736  002E  0876               	movf	_val_PWM,w
   737  002F  397F               	andlw	127
   738  0030  00F0               	movwf	??_isr
   739  0031  0870               	movf	??_isr,w
   740  0032  00F6               	movwf	_val_PWM
   741  0033                     i1l744:
   742                           
   743                           ;main.c: 71:         if (!flag_servo){
   744  0033  0874               	movf	_flag_servo,w
   745  0034  0475               	iorwf	_flag_servo+1,w
   746  0035  1D03               	btfss	3,2
   747  0036  2838               	goto	u5_21
   748  0037  2839               	goto	u5_20
   749  0038                     u5_21:
   750  0038  285A               	goto	i1l748
   751  0039                     u5_20:
   752  0039                     i1l746:
   753                           
   754                           ;main.c: 73:             CCPR2L = (uint8_t)((val_PWM>>2));
   755  0039  0876               	movf	_val_PWM,w
   756  003A  00F0               	movwf	??_isr
   757  003B  3002               	movlw	2
   758  003C                     u6_25:
   759  003C  1003               	clrc
   760  003D  0CF0               	rrf	??_isr,f
   761  003E  3EFF               	addlw	-1
   762  003F  1D03               	skipz
   763  0040  283C               	goto	u6_25
   764  0041  0870               	movf	??_isr,w
   765  0042  009B               	movwf	27	;volatile
   766                           
   767                           ;main.c: 76:             CCP2CONbits.DC2B0 = val_PWM & 1;
   768  0043  0876               	movf	_val_PWM,w
   769  0044  3901               	andlw	1
   770  0045  00F0               	movwf	??_isr
   771  0046  0EF0               	swapf	??_isr,f
   772  0047  081D               	movf	29,w	;volatile
   773  0048  0670               	xorwf	??_isr,w
   774  0049  39EF               	andlw	-17
   775  004A  0670               	xorwf	??_isr,w
   776  004B  009D               	movwf	29	;volatile
   777                           
   778                           ;main.c: 77:             CCP2CONbits.DC2B1 = (val_PWM >> 1) & 1;
   779  004C  0876               	movf	_val_PWM,w
   780  004D  00F0               	movwf	??_isr
   781  004E  1003               	clrc
   782  004F  0C70               	rrf	??_isr,w
   783  0050  3901               	andlw	1
   784  0051  00F1               	movwf	??_isr+1
   785  0052  0EF1               	swapf	??_isr+1,f
   786  0053  0DF1               	rlf	??_isr+1,f
   787  0054  081D               	movf	29,w	;volatile
   788  0055  0671               	xorwf	??_isr+1,w
   789  0056  39DF               	andlw	-33
   790  0057  0671               	xorwf	??_isr+1,w
   791  0058  009D               	movwf	29	;volatile
   792                           
   793                           ;main.c: 78:         }
   794  0059  286D               	goto	i1l750
   795  005A                     i1l748:
   796                           
   797                           ;main.c: 81:             CCPR1L = (uint8_t)(val_PWM>>2);
   798  005A  0876               	movf	_val_PWM,w
   799  005B  00F0               	movwf	??_isr
   800  005C  3002               	movlw	2
   801  005D                     u7_25:
   802  005D  1003               	clrc
   803  005E  0CF0               	rrf	??_isr,f
   804  005F  3EFF               	addlw	-1
   805  0060  1D03               	skipz
   806  0061  285D               	goto	u7_25
   807  0062  0870               	movf	??_isr,w
   808  0063  0095               	movwf	21	;volatile
   809                           
   810                           ;main.c: 84:             CCP1CONbits.DC1B = val_PWM & 0b11;
   811  0064  0876               	movf	_val_PWM,w
   812  0065  3903               	andlw	3
   813  0066  00F0               	movwf	??_isr
   814  0067  0EF0               	swapf	??_isr,f
   815  0068  0817               	movf	23,w	;volatile
   816  0069  0670               	xorwf	??_isr,w
   817  006A  39CF               	andlw	-49
   818  006B  0670               	xorwf	??_isr,w
   819  006C  0097               	movwf	23	;volatile
   820  006D                     i1l750:
   821                           
   822                           ;main.c: 86:      PIR1bits.SSPIF = 0;
   823  006D  118C               	bcf	12,3	;volatile
   824  006E                     i1l60:
   825  006E  0873               	movf	??_isr+3,w
   826  006F  008A               	movwf	10
   827  0070  0E72               	swapf	??_isr+2,w
   828  0071  0083               	movwf	3
   829  0072  0EFE               	swapf	btemp,f
   830  0073  0E7E               	swapf	btemp,w
   831  0074  0009               	retfie
   832  0075                     __end_of_isr:
   833  007E                     btemp	set	126	;btemp
   834  007E                     wtemp0	set	126
   835                           
   836                           	psect	intentry
   837  0004                     __pintentry:	
   838                           ;incstack = 0
   839                           ; Regs used in _isr: [wreg+status,2+status,0]
   840                           
   841  0004                     interrupt_function:
   842  007E                     saved_w	set	btemp
   843  0004  00FE               	movwf	btemp
   844  0005  0E03               	swapf	3,w
   845  0006  00F2               	movwf	??_isr+2
   846  0007  080A               	movf	10,w
   847  0008  00F3               	movwf	??_isr+3
   848  0009  120A  118A  2816   	ljmp	_isr
   849                           
   850                           	psect	idloc
   851                           
   852                           ;Config register IDLOC0 @ 0x2000
   853                           ;	unspecified, using default values
   854  2000                     	org	8192
   855  2000  3FFF               	dw	16383
   856                           
   857                           ;Config register IDLOC1 @ 0x2001
   858                           ;	unspecified, using default values
   859  2001                     	org	8193
   860  2001  3FFF               	dw	16383
   861                           
   862                           ;Config register IDLOC2 @ 0x2002
   863                           ;	unspecified, using default values
   864  2002                     	org	8194
   865  2002  3FFF               	dw	16383
   866                           
   867                           ;Config register IDLOC3 @ 0x2003
   868                           ;	unspecified, using default values
   869  2003                     	org	8195
   870  2003  3FFF               	dw	16383
   871                           
   872                           	psect	config
   873                           
   874                           ;Config register CONFIG1 @ 0x2007
   875                           ;	Oscillator Selection bits
   876                           ;	FOSC = INTRC_NOCLKOUT, INTOSCIO oscillator: I/O function on RA6/OSC2/CLKOUT pin, I/O f
      +                          unction on RA7/OSC1/CLKIN
   877                           ;	Watchdog Timer Enable bit
   878                           ;	WDTE = OFF, WDT disabled and can be enabled by SWDTEN bit of the WDTCON register
   879                           ;	Power-up Timer Enable bit
   880                           ;	PWRTE = OFF, PWRT disabled
   881                           ;	RE3/MCLR pin function select bit
   882                           ;	MCLRE = OFF, RE3/MCLR pin function is digital input, MCLR internally tied to VDD
   883                           ;	Code Protection bit
   884                           ;	CP = OFF, Program memory code protection is disabled
   885                           ;	Data Code Protection bit
   886                           ;	CPD = OFF, Data memory code protection is disabled
   887                           ;	Brown Out Reset Selection bits
   888                           ;	BOREN = OFF, BOR disabled
   889                           ;	Internal External Switchover bit
   890                           ;	IESO = OFF, Internal/External Switchover mode is disabled
   891                           ;	Fail-Safe Clock Monitor Enabled bit
   892                           ;	FCMEN = OFF, Fail-Safe Clock Monitor is disabled
   893                           ;	Low Voltage Programming Enable bit
   894                           ;	LVP = OFF, RB3 pin has digital I/O, HV on MCLR must be used for programming
   895                           ;	In-Circuit Debugger Mode bit
   896                           ;	DEBUG = 0x1, unprogrammed default
   897  2007                     	org	8199
   898  2007  20D4               	dw	8404
   899                           
   900                           ;Config register CONFIG2 @ 0x2008
   901                           ;	Brown-out Reset Selection bit
   902                           ;	BOR4V = BOR40V, Brown-out Reset set to 4.0V
   903                           ;	Flash Program Memory Self Write Enable bits
   904                           ;	WRT = OFF, Write protection off
   905  2008                     	org	8200
   906  2008  3FFF               	dw	16383

Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         3
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      4       7
    BANK0            80      0       0
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    None.

Critical Paths under _isr in COMMON

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0       0
                              _setup
 ---------------------------------------------------------------------------------
 (1) _setup                                                0     0      0       0
                            _set_PWM
                            _set_SPI
 ---------------------------------------------------------------------------------
 (2) _set_SPI                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _set_PWM                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _isr                                                  4     4      0       0
                                              0 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _setup
     _set_PWM
     _set_SPI

 _isr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      4       7       1       50.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0       7       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0       7      12        0.0%


Microchip Technology PIC Macro Assembler V2.35 build 20211206165544 
Symbol Table                                                                                   Thu Jun 02 00:35:00 2022

            _SSPSTATbits 0094                       l71 00C0                       l80 00A1  
                     l65 00D8                       l74 00D2                       l66 00D8  
                     l77 0098                       l79 009C                       u10 009C  
                     u11 009B                      l700 008C                      l710 0094  
                    l702 008E                      l712 0095                      l704 0090  
                    l720 00A9                      l714 0097                      l706 0092  
                    l730 00B9                      l722 00AD                      l708 0093  
                    l732 00BC                      l724 00AE                      l716 00A2  
                    l734 00BF                      l726 00B3                      l718 00A6  
                    l680 00CD                      l672 00C1                      l728 00B8  
                    l690 0078                      l682 00CE                      l674 00C5  
                    l754 00D3                      l692 007C                      l684 00D1  
                    l676 00C8                      l694 0080                      l678 00CC  
                    l696 0084                      l688 0075                      l698 0088  
                    _PR2 0092                      _isr 0016                     ?_isr 0070  
                   i1l60 006E                     u2_20 001C                     u2_21 001B  
                   u3_20 0027                     u3_21 0025                     u4_20 0028  
                   u5_20 0039                     u5_21 0038                     u6_25 003C  
                   u7_25 005D                     _main 00D3                     btemp 007E  
                   start 000C                    ??_isr 0070                    ?_main 0070  
                  _ANSEL 0188                    i1l740 001C                    i1l750 006D  
                  i1l742 002E                    i1l744 0033                    i1l746 0039  
                  i1l738 0016                    i1l748 005A                    _PORTC 0007  
                  _TRISC 0087                    _setup 00A2          __end_of_set_SPI 00D3  
        __end_of_set_PWM 00A2                    pclath 000A                    status 0003  
                  wtemp0 007E          __initialization 000F             __end_of_main 00DC  
                 ??_main 0074                   _CCPR1L 0015                   _CCPR2L 001B  
                 ?_setup 0070                   _ANSELH 0189                   _SSPBUF 0013  
              ??_set_SPI 0074                ??_set_PWM 0074                   saved_w 007E  
__end_of__initialization 0012           __pcstackCOMMON 0070            __end_of_setup 00C1  
                ??_setup 0074               __pmaintext 00D3               __pintentry 0004  
                _CCP1CON 0017                  _CCP2CON 001D               _flag_servo 0074  
                __ptext1 00A2                  __ptext2 00C1                  __ptext3 0075  
                __ptext4 0016                _T2CONbits 0012                  _val_PWM 0076  
                _set_SPI 00C1                  _set_PWM 0075     end_of_initialization 0012  
              _TRISAbits 0085                _TRISCbits 0087              _CCP1CONbits 0017  
            _CCP2CONbits 001D      start_initialization 000F              __end_of_isr 0075  
            __pbssCOMMON 0074                ___latbits 0002                 ?_set_SPI 0070  
               ?_set_PWM 0070        interrupt_function 0004                 _PIE1bits 008C  
               _PIR1bits 000C               _INTCONbits 000B                 intlevel1 0000  
             _OSCCONbits 008F               _SSPCONbits 0014  
